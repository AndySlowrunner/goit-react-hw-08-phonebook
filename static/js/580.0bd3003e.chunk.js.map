{"version":3,"file":"static/js/580.0bd3003e.chunk.js","mappings":"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","sources":["components/ContactFilter/StyledFilter.jsx","redux/filterSlice.jsx","redux/selectors.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactForm/StyledForm.jsx","redux/operations.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/StyledList.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledFilter = styled.form`\n    display: flex;\n    flex-direction: column;\n    width: 164px;\n    gap: 4px;\n`;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterInitialState = {\n    filter: '',\n};\n\nconst filterSlice = createSlice({\n    name: \"filter\",\n    initialState: filterInitialState,\n    reducers: {\n        setFilter(state, action) {\n            state.filter = action.payload;\n        }\n    }\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter], (items, filters) => {\n        return items.filter(item => item.name.toLowerCase()\n            .includes(filters.toLowerCase()))\n    });","import { useDispatch, useSelector } from \"react-redux\";\nimport { StyledFilter } from \"./StyledFilter\";\nimport { setFilter } from \"redux/filterSlice\";\nimport { selectFilter, selectVisibleContacts } from \"redux/selectors\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const value = useSelector(selectFilter);\n    const checkList = useSelector(selectVisibleContacts);\n    console.log(checkList.length);\n\n    const handleChange = (e) => {\n        dispatch(setFilter(e.target.value));\n    }\n\n    return (\n        <>\n            {checkList.length > 0 ? (\n                <StyledFilter>\n                    <label>Find contacts by name</label>\n                    <input\n                        type=\"text\"\n                        value={value}\n                        onChange={handleChange}\n                    />\n                </StyledFilter>) : (<p>Please, add your contacts!</p>)}\n        </>\n    );\n}","import styled from 'styled-components';\nimport { Form } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n    width: 164px;\n    padding: 8px 124px 8px 8px;\n\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    gap: 8px;\n`;\n\nexport const ButtomStyle = styled.button`\n    width: 90px;\n`;\n\nexport const StyledDiv = styled.div`\n    margin-left: 10px;\n`;","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://6557686cbd4bcef8b61294a7.mockapi.io\";\n\nexport const fetchContacts = createAsyncThunk(\n    'contacts/fetchAll',\n    async (_, thunkAPI) => {\n        try {\n            const response = await axios.get(\"/contacts\");\n            return response.data;\n        } catch (e) {\n            return thunkAPI.rejectWithValue(e.message);\n        }\n    }\n);\n\nexport const addContact = createAsyncThunk(\n    \"contacts/addContact\",\n    async (contact, thunkAPI) => {\n        try {\n            const response = await axios.post(\"/contacts\", contact);\n            return response.data;\n        } catch (e) {\n            return thunkAPI.rejectWithValue(e.message);\n        }\n    }\n);\n\nexport const deleteContact = createAsyncThunk(\n    \"contacts/deleteContact\",\n    async (contactId, thunkAPI) => {\n        try {\n            const response = await axios.delete(`/contacts/${contactId}`);\n            return response.data;\n        } catch (e) {\n            return thunkAPI.rejectWithValue(e.message);\n        }\n    }\n);","import { Formik, Field } from \"formik\";\nimport { StyledForm, ButtomStyle } from \"./StyledForm\";\nimport * as yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/selectors\";\nimport { addContact } from \"redux/operations\";\n\nconst schema = yup.object().shape({\n    name: yup.string().required(),\n    phone: yup.string().required(),\n});\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n        const items = useSelector(selectContacts);\n\n    const handleSubmit = (values, {resetForm}) => {      \n        const isExist = items.some(item => item.name.toLowerCase() === values.name.toLowerCase());\n        \n        if (isExist) {\n            alert(`${values.name} is already in contacts.`);\n            return\n        }\n        \n        dispatch(addContact({ ...values }));\n        resetForm();\n    };\n    \n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                phone: '',\n            }}\n            onSubmit={handleSubmit}\n            validationSchema={schema}\n        >\n            <StyledForm>\n                <label>Name</label>\n                <Field\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n                <label>Number</label>\n                <Field\n                    type=\"tel\"\n                    name=\"phone\"\n                    pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n                <ButtomStyle type=\"submit\">Add contact</ButtomStyle>\n            </StyledForm>\n        </Formik>\n    );\n};","import styled from \"styled-components\";\n\nexport const StyledList = styled.li`\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    height: 24px;\n`;\nexport const StyledUl = styled.ul`\n    padding: 0;\n`;","import { useDispatch, useSelector } from \"react-redux\"\nimport { StyledList, StyledUl } from \"./StyledList\"\nimport { selectVisibleContacts } from \"redux/selectors\"\nimport { deleteContact } from \"redux/operations\";\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectVisibleContacts);\n    const dispatch = useDispatch();\n\n    return (\n        <StyledUl>\n            {contacts.map(({name, phone, id}) =>\n                <StyledList key={id}>\n                    <p>{name}:{' ' + phone}</p>\n                    <button onClick={() => {\n                        dispatch(deleteContact(id));\n                    }}>Delete</button>\n                </StyledList>\n            )}\n        </StyledUl>\n    )\n}","import { Filter } from \"components/ContactFilter/ContactFilter\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { StyledDiv } from \"components/ContactForm/StyledForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/operations\";\nimport { selectError, selectIsLoading } from \"redux/selectors\";\n\nexport const Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n    \n    return (\n        <StyledDiv>\n            <h1>Phonebook</h1>\n            <ContactForm/>\n            <h2>Contacts</h2>\n            <Filter/>\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList/>\n        </StyledDiv>\n    );\n };"],"names":["StyledFilter","styled","_templateObject","_taggedTemplateLiteral","filterSlice","createSlice","name","initialState","filter","reducers","setFilter","state","action","payload","actions","reducer","selectContacts","contacts","items","selectFilter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filters","item","toLowerCase","includes","Filter","dispatch","useDispatch","value","useSelector","checkList","console","log","length","_jsx","_Fragment","children","_jsxs","type","onChange","e","target","StyledForm","Form","ButtomStyle","_templateObject2","StyledDiv","_templateObject3","axios","fetchContacts","createAsyncThunk","async","_","thunkAPI","data","rejectWithValue","message","addContact","contact","deleteContact","contactId","concat","schema","yup","shape","required","phone","ContactForm","Formik","initialValues","onSubmit","handleSubmit","values","_ref","resetForm","some","alert","validationSchema","Field","pattern","title","StyledList","StyledUl","ContactList","map","id","onClick","Contacts","useEffect"],"sourceRoot":""}